services:
### MySQL Container
  auth-db:
    build:
      dockerfile: auth-db.Dockerfile
      args:
        - MYSQL_DATABASE=${AUTH_DB_DATABASE}
        - MYSQL_USER=${AUTH_DB_USER}
        - MYSQL_PASSWORD=${AUTH_DB_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${AUTH_DB_ROOT_PASSWORD}
    ports:
      - "${AUTH_DB_PORT}:3306"
  auth-service:
  #TODO: Drop env_file
    env_file: .env
    build:
      dockerfile: auth-service.Dockerfile
      args:
        - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
        - API_KEY=${AUTH_SERVICE_API_KEY}
        - ADMIN_PASS=${AUTH_SERVICE_ADMIN_PASS}
  nginx:
    build:
      dockerfile: nginx.Dockerfile
      args:
        - DOMAIN=${DOMAIN}
    ports:
      - "80:80"
  service-db:
    build:
      dockerfile: service-db.Dockerfile
      args:
        - MYSQL_DATABASE=${SERVICE_DB_DATABASE}
        - MYSQL_USER=${SERVICE_DB_USER}
        - MYSQL_PASSWORD=${SERVICE_DB_PASSWORD}
        - MYSQL_ROOT_PASSWORD=${SERVICE_DB_ROOT_PASSWORD}
    ports:
      - "${SERVICE_DB_DEV_PORT}:3306"
  service:
  #TODO: Drop env_file
    env_file: .env
    build:
      dockerfile: service.Dockerfile
      args:
        - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
        - API_KEY=${SERVICE_API_KEY}
  auth-crm:
  #TODO: Drop env_file
    env_file: .env
    build:
      dockerfile: auth-crm.Dockerfile
      args:
        - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
